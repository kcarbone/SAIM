/**
 * SAIMFrame.java
 *
 *
 * This is a Micro-Manager plugin for using a Scanning Angle Interference 
 * Microscopy calibration device. This specific example uses the NetBeans GUI 
 * builder. It is based of ExampleFrame.java
 *
 *
 * Nico Stuurman, copyright Regents of the University of California, 2012
 * Kate Carbone, 2015
 *
 * LICENSE: This file is distributed under the BSD license. License text is
 * included with the source distribution.
 *
 * This file is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.
 */
package org.micromanager.saim;

import mmcorej.CMMCore;

import java.text.NumberFormat;

import java.util.prefs.Preferences;

import org.micromanager.api.ScriptInterface;

import org.jfree.data.xy.XYSeries;
import mmcorej.DeviceType;
import mmcorej.StrVector;
import org.micromanager.saim.fit.Fitter;
import org.micromanager.saim.plot.PlotUtils;
import java.text.DecimalFormat;

/**
 *
 * @author nico
 */
public class SAIMFrame extends javax.swing.JFrame {

    private final ScriptInterface gui_;
    private final CMMCore core_;
    private final Preferences prefs_;

    private final NumberFormat nf_;

    private final int frameXPos_ = 100;
    private final int frameYPos_ = 100;

    private static final String FRAMEXPOS = "FRAMEXPOS";
    private static final String FRAMEYPOS = "FRAMEYPOS";

    /**
     * Constructor
     *
     * @param gui - Reference to MM script interface
     */
    public SAIMFrame(ScriptInterface gui) {
        gui_ = gui;
        core_ = gui_.getMMCore();
        nf_ = NumberFormat.getInstance();
        prefs_ = Preferences.userNodeForPackage(this.getClass());

        initComponents();
        
        //Start Motor Position
        jTextField4.setText("");
        //End Motor Position
        jTextField2.setText("");
        //Number of Calibration Points
        jTextField1.setText("");
        jLabel7.setText("");
        //Calibration Output
        StrVector serialPorts = core_.getLoadedDevicesOfType(DeviceType.SerialDevice);
        for (int i = 0; i < serialPorts.size(); i++) {
            jComboBox1.addItem(serialPorts.get(i));
        }

        setLocation(frameXPos_, frameYPos_);

        setBackground(gui_.getBackgroundColor());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        OKButton_ = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setTitle("SAIM Plugin");
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onWindowClosing(evt);
            }
        });

        jLabel1.setText("SAIM Calibration");

        jLabel2.setText("Run Calibration: ");

        jLabel3.setText("Start Motor Position: ");

        jTextField2.setText("jTextField2");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("End Motor Position: ");

        jLabel5.setText("Select Calibrator Serial Port: ");

        jLabel6.setText("Polynomial Fit: ");

        jTextField4.setText("jTextField4");

        OKButton_.setText("OK");
        OKButton_.setAlignmentX(0.5F);
        OKButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButton_ActionPerformed(evt);
            }
        });

        jLabel7.setText("jLabel7");
        jLabel7.setAutoscrolls(true);

        jTextField1.setText("jTextField1");

        jLabel8.setText("Number of Calibration Steps:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8)
                            .addComponent(jLabel3))
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(jTextField1)
                            .addComponent(jTextField4))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(OKButton_))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(38, 38, 38))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(OKButton_))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When window closes, take the opportunity to save settings to Preferences
     *
     * @param evt
     */
    private void onWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowClosing
        prefs_.putInt(FRAMEXPOS, (int) getLocation().getX());
        prefs_.putInt(FRAMEYPOS, (int) getLocation().getY());

    }//GEN-LAST:event_onWindowClosing

    private void OKButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButton_ActionPerformed
        // TODO add your handling code here:
        RunCalibration();
    }//GEN-LAST:event_OKButton_ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKButton_;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    private void RunCalibration() {

        // Edit these variables
        final int startPosition = Integer.parseInt(jTextField4.getText());
        final int endPosition = Integer.parseInt(jTextField2.getText());
        final int nrAngles = Integer.parseInt(jTextField1.getText());
        final int angleStepSize = (endPosition - startPosition)/nrAngles;
        final String port = jComboBox1.getSelectedItem().toString();

        // Set these variables to the correct values and leave
        final String deviceName = "TITIRF";
        final String propName = "Position";

        class calThread extends Thread {

            calThread(String threadName) {
                super(threadName);
            }

            @Override
            public void run() {
                int i = 0;
                try {
                    core_.setShutterOpen(true);
                    XYSeries dect1gaussianMeans = new XYSeries(new Integer(nrAngles), false, true);
                    XYSeries dect2gaussianMeans = new XYSeries(new Integer(nrAngles), false, true);
                    int pos = startPosition;
                    for (int angle = 0; angle <= nrAngles; angle++) {
                        XYSeries dect1readings = new XYSeries(new Integer(1536), false, true);
                        XYSeries dect2readings = new XYSeries(new Integer(1536), false, true);
                        //comment out these lines to disable changing motor position
                        core_.setProperty(deviceName, propName, pos);
                        core_.waitForDevice(deviceName);
                        core_.setSerialPortCommand(port, "1", "");
                        gui_.message("Image: " + angle + ", Pos: " + pos);
                        for (i = 0; i < 1536; i++) {
                            //ReportingUtils.logMessage("" + i);
                            String answer = core_.getSerialPortAnswer(port, "\n");
                            //gui.message(i + "   " + answer);
                            String[] vals = answer.trim().split("\\t");
                            if (vals.length == 2) {
                                int dect1px = Integer.valueOf(vals[0]);
                                int dect2px = Integer.valueOf(vals[1]);
                                dect1readings.add(i, dect1px);
                                dect2readings.add(i, dect2px);
                            } else
                                System.out.println("Val is not 2: " + answer);
                        }
                        core_.getSerialPortAnswer(port, "\n");
                        
                        //shuffle pixels to match physical layout of detectors
                        int size = dect1readings.getItemCount();
                        XYSeries dect1readingsFlip = new XYSeries(new Integer(size), false, true);
                        //dect1readingsFlip = dect1readings;
                        for (int a = 0; a < size; a++) {
                            //there is a problem with the size of dect1readings
                            Number pxvalue = dect1readings.getY(size - 1 - a);
                            dect1readingsFlip.add(a, pxvalue);
                        }
                        int size2 = dect2readings.getItemCount();
                        int halfSize = size2 / 2;
                        XYSeries dect2readingsFlip = new XYSeries(new Float(size), false, true);
                        //dect2readingsFlip = dect2readings;
                        //original code for dect2readingsFlip:
                        for (int j = 0; j < halfSize; j++) {
                            Number pxvalue = dect2readings.getY(halfSize - 1 - j);
                            dect2readingsFlip.add(j*1, pxvalue);
                        }
                        for (int k = 0; k < halfSize; k++) {
                            Number pxvalue = dect2readings.getY(halfSize + k);
                            dect2readingsFlip.add((halfSize + k)*1, pxvalue);
                        }
                        //reverse transposition for debugging
                        dect2readingsFlip = dect2readings;
                        
                        PlotUtils myPlotter = new PlotUtils(prefs_);
                        XYSeries[] toPlot = new XYSeries[2];
                        toPlot[0] = dect1readingsFlip;
                        //toPlot[0] = dect2readings;
                        toPlot[1] = dect2readingsFlip;
                        boolean[] showShapes = {false, false};
                        myPlotter.plotDataN("SAIM Scan", toPlot, "Pixel", "Intensity", showShapes, "Pos: " + pos);
                        //Fit result to a gaussian
                        double[] result1 = Fitter.fit(dect1readingsFlip, Fitter.FunctionType.Gaussian, null);
                        gui_.message("Dectector 1 Mean: " + result1[1] + "\n");
                        double[] result2 = Fitter.fit(dect2readingsFlip, Fitter.FunctionType.Gaussian, null);
                        gui_.message("Dectector 2 Mean: " + result2[1] + "\n");
                        dect1gaussianMeans.add(pos, result1[1]);
                        dect2gaussianMeans.add(pos, result2[1]);
                        pos = pos + angleStepSize;
                    }
                    XYSeries trueAngles = new XYSeries(new Integer(nrAngles), false, true);
                    for (int l = 0; l <= nrAngles; l++) {
                        Number angle = dect1gaussianMeans.getX(l);
                        Number dect1val = dect1gaussianMeans.getY(l);
                        Number dect2val = dect2gaussianMeans.getY(l);
                        //pixel center to center distance is 63.5 um
                        double xdisp = (dect1val.floatValue() - dect2val.floatValue())*0.0635;
                        //detector1 center to detector2 center is 20.64 mm
                        double ydisp = 20.64;
                        Number trueAngle = Math.toDegrees(Math.atan(xdisp/ydisp));
                        trueAngles.add(angle, trueAngle);
                    }
                    PlotUtils myPlotter2 = new PlotUtils(prefs_);
                    XYSeries[] toPlot = new XYSeries[1];
                    toPlot[0] = trueAngles;
                    boolean[] showShapes = {false, false};
                    myPlotter2.plotDataN("Calibration Curve", toPlot, "Position", "True Angle", showShapes, "");
                    double[] calCurve = Fitter.fit(trueAngles, Fitter.FunctionType.Pol2, null);
                    String coeff1 = new DecimalFormat("#.##").format(calCurve[0]);
                    String coeff2 = new DecimalFormat("#.##").format(calCurve[1]); 
                    String offset = new DecimalFormat("#.##").format(calCurve[2]); 
                    jLabel7.setText("y = " + coeff1 + "* x^2 + " + coeff2 + "x + " + offset);
                    core_.setShutterOpen(false);
                } catch (Exception ex) {
                    ij.IJ.log(ex.getMessage() + "Ran until # " + i);
                }
            }
        }
        calThread calt = new calThread("SAIM Callibration");
        calt.start();
    }
}
